O que é um POD ?

Não é igual a um container

k get pods
k get pods -a
k get pods --all-namespaces
k get pods -A
k describe pods <nomedopod>
kubectl get pods giropops -o yaml
k get pods -o wide
k get pods -L run
k delete po giropops
k run strigus --image nginx --port 80
k get run --help

## Rodando em modo de terminal
k run -ti girus --image busybox

## Duas maneiras de acessar um pods

# 1 - Irá adentrar no estado atual do container
k attach <nome-do-pod> -c <nome-do-container> -it

# 2 - Irá executar o bash dentro do container (no caso se acabar atachando em outro processo)
k exec strigus -it -- bash

## ps -ef ## -->> Verificar processos em execução
## cd /proc/ -->> pastas com cada processo em execução (para verificar qual processo é cat /proc/<munero-do-processo>/cmdline)

k run girus-1 --image alpine --dru-run=client
k run girus-1 --image alpine --dru-run=client -o yaml >> pod.yaml
k apply -f pod.yaml ## -->> Aplica as configurações mesmo que já esteja criado
## -f é filename....
k apply -f pod.yaml ## -->> Crias as configurações caso ainda não estejam criadas


## Ao tentar adicionar um container novo no pod.yaml e aplicá-lo mostra o seguinte erro

The Pod "girus" is invalid: spec.containers: Forbidden: pod updates may not add or remove containers

## Isso informa que não tem como adicionar container com o apply, precisa deletar e depois criar novamente.

k get po -w ## -w significa watch para ficar assistindo o resultado deste comando

## Verificar os logs dos pods

k describe pods <nomedopod>
k logs <nomedopod>
k logs <nomedopod> -c <nomedocontainer>

kubectl logs -f giropops ## -->> Verificar logs do pod em tempo real


spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  - image: busybox
    name: busybox
    args: 
    - sleep ## -->> Rodando o comando sleep ao terminar de criar o container do busybox
    - "600" ## -->> Colocando 600 segudos para o sleep


spec:
  containers:
  - image: ubuntu
    name: ubuntu
    args:
    - sleep
    - "1800"
    resources:
      limits: ## -->> Limitando recursos
        cpu: "1.5"
        memory: "128Mi"
      requests: ## -->> Estipulando recurso inicial, iniciará com x de recurso
        cpu: "0.3"
        memory: "64Mi"


spec:
  containers:
  - image: nginx
    name: webserver
    volumeMounts: ## -->> Definindo um volume para o container
    - mountPath: /giropops
      name: "primeiro-emptydir"
    resources:
      limits:
        cpu: "1"
        memory: "128Mi"
      requests:
        cpu: "0.5"
        memory: "64Mi"
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes: ## -->> Criando um volume do tipo emptyDir chamado primeiro-emptydir tamanho máximo de 256Mb
  - name: primeiro-emptydir
    emptyDir:
      sizeLimit: 256Mi

OBS: Tudo que houver no emptyDir deste pod, quando você remover o pod, todos os dados vão embora junto com o volume.